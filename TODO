app:
====

 * improve handling of variables which contain sensitive data
    It would be nice to protect variables like passwords and other
    sensitive data i.e. by clearing the memory before returning it to
    the kernel. Sadly this is quite complicated with go as it is not
    possible to know for sure if there are any copies of the variable
    lying around in memory.
    It would be great to at least use syscall.Mlockall(syscall.MCL_FUTURE)
    but after adding that the app panics... why is this?

 * test password policy zxcvbn
    The golang implementation of zxcvbn produces different scores and
    crack-times as the json implementation this makes it difficult for
    the user to know whether a password will be accepted

pam-module:
===========

 * (fuzzy) testing
    Input from pam application (conversation function) and via the
    unix socket interface should get tested with random/invalid
    data. The output as well as memory access should be checked.

    https://cmocka.org/ and https://cwrap.org/pam_wrapper.html look
    very promising.

store:
======

 * check what kind of locking is possible and needed
    For now the app uses a single store instance and all actions
    are outlined by a single go-routine. It would be nice to get
    rid of this as it will be a bottleneck on high load and it
    shouldn't be needed anyway. There should be enough atomic
    operations on filesystem level to make this work.
