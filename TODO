app:
====

 * implement/test syncing of passwords
    There should be a cronjob/systemd-timer to sync passwords on
    a regular basis. This should be running on the receiving end
    of the sync process (pull-mode). In addition to this the
    'master' should be able to inform 'slaves' about new/changed
    passwords (push-mode).

 * improve handling of variables which contain sensitive data
    It would be nice to protect variables like passwords and other
    sensitive data i.e. by clearing the memory before returning it to
    the kernel. Sadly this is quite complicated with go as it is not
    possible to know for sure if there are any copies of the variable
    lying around in memory.
    It would be great to at least use syscall.Mlockall(syscall.MCL_FUTURE)
    but after adding that the app panics... why is this?

 * implement password policies
    It would be nice to be able to configure policies for what the
    administrator considers secure passwords. Weak passwords should
    get denied by the app.
    The password policies should be based on results from zxcvbn
    see: https://github.com/nbutton23/zxcvbn-go. Though it would be nice
    to make the evaluator configureable.

pam-module:
===========

 * (fuzzy) testing
    Input from pam application (conversation function) and via the
    unix socket interface should get tested with random/invalid
    data. The output as well as memory access should be checked.

    https://cmocka.org/ and https://cwrap.org/pam_wrapper.html look
    very promising.

store:
======

 * check what kind of locking is possible and needed
    For now the app uses a single store instance and all actions
    are outlined by a single go-routine. It would be nice to get
    rid of this as it will be a bottleneck on high load and it
    shouldn't be needed anyway. There should be enough atomic
    operations on filesystem level to make this work.
