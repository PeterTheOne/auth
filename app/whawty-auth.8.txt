whawty-auth(8)
==============

NAME
----

whawty-auth - manage whawty auth stores


SYNOPSIS
--------

whawty-auth [global options] command [command options] [arguments...]


DESCRIPTION
-----------

*whawty-auth* implements everything which is needed to run a whawty auth service.
This tool can be used to initialize and manage whawty auth stores. When used as a
daemon it can be used to offer a saslauthd compatible authentication service and
or a small web interface to manage users and passwords. Together with *pam_whawty*
this can also be used with PAM.


GLOBAL OPTIONS
--------------

The following options can be passed to *whawty-auth*:

*-c | --conf </path/to/config.json>*::
    This sets the path to main configuration file. By default *whawty-auth* uses
    the file */etc/whawty-auth/default.json*. This may also be configured using
    the environment variable: WHAWTY_AUTH_CONFIG. If both the environment variable
    and the command line option are supplied the latter is used.

*--do-check[=(true|false)]*::
    Run basic consistency check on the whawty store on startup. By default checks
    are enabled. This can also be configured using the environment variable:
    WHAWTY_AUTH_DO_CHECK. If both the environment variable and the command line
    option are supplied the latter is used.

*-h | --help*::
    Show help text and exit.

*-v | --version*::
    Print version information and exit.

COMMANDS
--------

Any of the following commands supports *-h | --help* as an option. This will print
extra help information for the command. All these commands use the auth store directory
as specified by the main configuration file.

init
~~~~

*init* can be used to initialize a whawty auth store. For this to work the directory
must exist, be writeable by the user who runs the program and must be empty. The first
argument is the name of the admin user which will get created. The password of the
user can be supplied using a second optional argument. If no password is supplied on
the command line *whawty-auth* will prompt the user for it.


check
~~~~~

Check the whawty auth store for consistency.


add
~~~

This adds a user to the store. The name of the user must be supplied as the first
argument. The password may be supplied as a second parameter. If this is omitted
*whawty-auth* prompts the user for it.


remove
~~~~~~

*remove* can be used to delete a user from the store. The sole argument supported
specifies to user to be deleted.


update
~~~~~~

This can be used to change the password of an existing user. The first argument
specifies the username. The new password may be specified as a second argument.
If no password is set using the command line the user will be prompted for it.


set-admin
~~~~~~~~~

*set-admin* can be used to change the admin status of a user. The first argument
is the username. The second argument should reflect the new status. *true* or *1*
enables the admin flag. *false* or *0* disables it.


list
~~~~

This prints a list of all users in the store.

*--full*::
    This option tells *whawty-auth* to print additional info for each user. By default
    only the name, admin status and last change date are printed.


authenticate
~~~~~~~~~~~~

*authenticate* runs a full auth-check for the given user. The username in question needs
to be supplied as a first argument. The second optional argument is the password. If
no password is specified the user will be prompted for it. If the authentication was
successful the result code will be 0. On error the result code will be 1.


run
~~~

This instructs *whawty-auth* to run as an authentication service.

*-s | --sock </path/to/whawty/sock>*::
     Open a saslauthd compatible unix socket. This option might be supplied several times.
     *whawty-auth* will listen on all sockets for authentication requests.

*-web-addr (<addr>|+++*+++):<port>*::
     Also start a small web interface on the specified address.


BUGS
----
Most likely there are some bugs in *whawty-auth*. If you find a bug, please let
the developers know at http://github.com/whawty/auth. Of course, pull requests
are preferred.


SEE ALSO
--------
*pam-whawty*(8)


AUTHORS
-------

Christian Pointner <equinox@spreadspace.org>


RESOURCES
---------

Main web site: http://github.com/whawty/auth
